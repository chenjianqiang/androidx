import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"


    defaultConfig {
        applicationId "com.cjq.androidx"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi-v7a', 'x86'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        //指定room.schemaLocation生成的文件路径
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    /*sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }*/
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(':lanso')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'com.blankj:utilcode:1.28.4'
    implementation 'org.aspectj:aspectjrt:1.8.13'
    implementation "androidx.work:work-runtime:2.3.4"
    implementation "androidx.room:room-runtime:2.2.5"
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    annotationProcessor "androidx.room:room-compiler:2.2.5"
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.alibaba:fastjson:1.1.68.android'

    implementation 'com.github.bumptech.glide:glide:4.8.0'//glide图片加载
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.8.0'

    implementation 'com.tencent.tbs.tbssdk:sdk:43697'
    implementation 'com.annimon:stream:1.2.1'
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    implementation 'com.gyf.immersionbar:immersionbar-components:3.0.0'

    implementation 'com.tencent:mmkv-static:1.2.3'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}
final def log = project.logger
final def variants = project.android.applicationVariants
if (variants != null) {
    variants.all { variant ->
        JavaCompile javaCompile = variant.javaCompileProvider.get()
        variant.outputs.all { output ->
            def variantName = ""
            output.name.tokenize('-').eachWithIndex { token, index ->
                variantName = variantName + (index == 0 ? token : token.capitalize())
            }
            javaCompile.doLast {
                MessageHandler handler = new MessageHandler(true)
                String[] javaArgs = ["-showWeaveInfo",
                                     "-1.8",
                                     "-inpath", javaCompile.destinationDir.toString(),
                                     "-aspectpath", javaCompile.classpath.asPath,
                                     "-d", javaCompile.destinationDir.toString(),
                                     "-classpath", javaCompile.classpath.asPath,
                                     "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
                new Main().run(javaArgs, handler)
                File kotlinCompileDstDir = new File(project.buildDir.path + "/tmp/kotlin-classes/" + variantName)
                String kotlinCompileDstPath = kotlinCompileDstDir.getAbsolutePath()
                if (kotlinCompileDstDir.isDirectory() && kotlinCompileDstDir.list().length > 0) {
                    String[] kotlinArgs = ["-showWeaveInfo",
                                           "-1.8",
                                           "-inpath", kotlinCompileDstPath,
                                           "-aspectpath", javaCompile.classpath.asPath,
                                           "-d", kotlinCompileDstPath,
                                           "-classpath", javaCompile.classpath.asPath,
                                           "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
                    new Main().run(kotlinArgs, handler)
                }
                File outFile = new File(project.rootProject.rootDir, "ajcwarn.log")
                BufferedWriter os = new BufferedWriter(new FileWriter(outFile, true))
                boolean writeTime = true
                for (IMessage message : handler.getMessages(null, true)) {
                    switch (message.getKind()) {
                        case IMessage.ABORT:
                        case IMessage.ERROR:
                        case IMessage.FAIL:
                            println "aspectj error: " + message.message + "\n" + message.thrown
                            throw new RuntimeException(message.message, message.thrown)
                        case IMessage.WARNING:
                            String warnMsg = "aspectj warn: " + message.message
                            System.err.println(warnMsg)
                            if (writeTime) {
                                SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                                String time = sf.format(new Date())
                                os.newLine()
                                os.writeLine("build   time: " + time)
                                writeTime = false
                            }
                            os.writeLine(warnMsg)
                            os.flush()
                            break
                        case IMessage.INFO:
//                                println "aspectj info: " + message.message
                            break
                        case IMessage.DEBUG:
//                                println "aspectj debug: " + message.message
                            break
                    }
                }
            }
        }
    }
}